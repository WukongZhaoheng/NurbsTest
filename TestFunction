// NURBSAPP.cpp : Nurbs特性。
//

#include "pch.h"
#include <iostream>
#include <fstream>
#include "CalculationBase.h"
#include "NurbsBase.h"
using namespace std;

int main()
{
	ofstream outFile;
	outFile.open("NurbsDemo.txt");   //利用界面程序导入文本，显示相关点线面。
	outFile.precision(4);

	//1. Nurbs曲线构造
	//1.1 由各参数构成曲线类
	int ni = 7;    //曲线控制点个数
	int ki = 3;    //曲线阶次
	NURBSpline Splinei(ni, ki);
	Splinei.ControlPoint = { {10,0,0},{8,10,0},{20,15,0},{25,5,0},{30,-10,0},{45,-5,0},{50,15,0} };    //曲线控制点
	Splinei.U = { 0,0,0,0,0.2,0.5,0.9,1,1,1,1 };    //曲线节点向量，两端k+1次重复，U[i]<=U[i+1]
	Splinei.w = { 1,0.5,1,0.8,1,0.5,1 };        //曲线控制点权值

	//1.2 Nurbs曲线上的点
	double ui = 0.25;    //取值在U范围内的参数，对应曲线上的点
	POINT PSplinei0 = Point_Nurbspline(Splinei, ui);    //曲线上的点P(0.25)
	outFile << "TYPE=POINTS\n" << "COLOR=#ff5511\n";
	outFile << "(" << PSplinei0.x << "," << PSplinei0.y << "," << PSplinei0.z << ")";
	outFile << "\nEND\n\n";

	//1.3 Nurbs曲线
	double deltaui = 0.005;    //采样间隔，将u按取值范围分为(1/deltaui)段，取各点处的u值对应的点
	int numi = int((1 / deltaui) + 1);
	vector<POINT> SSplinei = Nurbs_CurvePoint(Splinei, deltaui);        //各u值对应的曲线点集，用于显示曲线
	outFile << "TYPE=LINES\n" << "COLOR=#ffbb00\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << SSplinei[i].x << "," << SSplinei[i].y << "," << SSplinei[i].z << ");";
	}
	outFile << "\nEND\n\n";
		//2. Nurbs圆锥曲线表达
	//2.1 圆的Nurbs表达（二维曲线），二次Nurbs，默认z坐标为0，需要时做坐标换算
	POINT CirCenter = { 10, 20, 0 };    //圆心坐标
	double Radius = 30;                 //半径
	vector<POINT> CirNurbs1 = CircleNurbs(CirCenter, Radius, deltaui);   //圆曲线点集
	outFile << "TYPE=LINES\n" << "COLOR=#33ffdd\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << CirNurbs1[i].x << "," << CirNurbs1[i].y << "," << CirNurbs1[i].z << ");";
	}
	outFile << "\nEND\n\n";

	//2.2 圆弧的Nurbs表达（二维曲线），二次Nurbs，默认z坐标为0，需要时做坐标换算
	POINT ArcStartP = { 20, 10, 0 };    //圆弧的起始点
	POINT ArcCenter = { 60, 10, 0 };    //圆弧的圆心
	double ArcAngle1 = 100;             //圆弧角度，以起始点开始绕圆心逆时针的角度
	double ArcAngle2 = 270;             //圆弧角度，以起始点开始绕圆心逆时针的角度
	//按角度范围选择不同函数表达Nurbs圆弧
	vector<POINT> ArcNurbs1 = ArcNurbs_0to180(ArcStartP, ArcCenter, ArcAngle1, deltaui);      //(0,180]度圆弧
	vector<POINT> ArcNurbs2 = ArcNurbs_180to360(ArcStartP, ArcCenter, ArcAngle2, deltaui);    //[180,360]度圆弧
	outFile << "TYPE=LINES\n" << "COLOR=#ff88c2\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << ArcNurbs1[i].x << "," << ArcNurbs1[i].y << "," << ArcNurbs1[i].z << ");";
	}
	outFile << "\nEND\n\n";

	outFile << "TYPE=LINES\n" << "COLOR=#ffcccc\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << ArcNurbs2[i].x << "," << ArcNurbs2[i].y << "," << ArcNurbs2[i].z << ");";
	}
	outFile << "\nEND\n\n";

	//三点作圆弧的Nurbs表达
	POINT ArcStartPoint = { 20, 10, 0 };    //圆弧的起始点
	POINT ArcMiddlePoint = { 40, 20, 0 };   //圆弧通过的某点
	POINT ArcEndPoint = { 60, 40, 0 };      //圆弧的终点
	vector<POINT> ArcNurbs3 = ArcNurbs_TP(ArcStartPoint, ArcMiddlePoint, ArcEndPoint, deltaui);            //从起始点开始，通过中间点，到达终点的圆弧
	vector<POINT> CirNurbs2 = CirCleNurbs_TP(ArcStartPoint, ArcMiddlePoint, ArcEndPoint, deltaui);        //通过三点的圆
	outFile << "TYPE=LINES\n" << "COLOR=#008866\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << ArcNurbs3[i].x << "," << ArcNurbs3[i].y << "," << ArcNurbs3[i].z << ");";
	}
	outFile << "\nEND\n\n";

	outFile << "TYPE=LINES\n" << "COLOR=#ccddff\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << CirNurbs2[i].x << "," << CirNurbs2[i].y << "," << CirNurbs2[i].z << ");";
	}
	outFile << "\nEND\n\n";

	//2.3 圆锥曲线Nurbs表示
	int nc = 3;
	int kc = 2;
	double w1 = 1;
	double w2 = 0.5;
	double w3 = 1;
	NURBSpline SplineConics(nc, kc);
	SplineConics.ControlPoint = { {10,10,0},{30,80,0},{60,20,0} };
	SplineConics.U = { 0,0,0,1,1,1 };
	SplineConics.w = { w1,w2,w3 };
	double ShapeControl = (w1*w3) / (w2*w2);   //形状不变因子
	/*
	ShapeControl = 0 :            直线段P1P2，P2P3
	0 < ShapeControl < 1 :        双曲线
	ShapeControl = 1 :            抛物线
	1 < ShapeControl < 无穷大     椭圆
	无穷大             直线P1P3
	*/

		//3.Nurbs曲面构造
	//3.1 Nurbs曲面类，两个方向的节点向量、控制点/权值等构成
	int na = 4;                //a向控制点个数
	int nb = 4;                //b向控制点个数
	int ka = 2;                //a向阶次
	int kb = 2;                //b向阶次
	NURBSCurvedSurface CS(na, ka, nb, kb);
	CS.ControlPoint =
	{
	{ {10,0, 0},{10,10, 0},{-10,10, 0},{-10,0, 0} },
	{ {10,0,10},{10,10,10},{-10,10,10},{-10,0,10} },
	{ {10,0,20},{10,10,20},{-10,10,20},{-10,0,20} },
	{ {10,0,30},{10,10,30},{-10,10,30},{-10,0,30} }
	};
	CS.Ui = { 0,0,0,0.5,1,1,1 };
	CS.Uj = { 0,0,0,0.5,1,1,1 };
	CS.w =
	{
	{ 1, 0.5, 0.5, 1 },
	{ 1, 0.5, 0.5, 1 },
	{ 1, 0.5, 0.5, 1 },
	{ 1, 0.5, 0.5, 1 }
	};

	//3.2 Nurbs曲面点
	double ua = 0.2;
	double ub = 0.2;
	POINT vct = Point_NurbsCurvedSurface(CS, ua, ub);
	outFile << "TYPE=POINTS\n" << "COLOR=#7744ff\n";
	outFile << "(" << vct.x << "," << vct.y << "," << vct.z << ")";
	outFile << "\nEND\n\n";

	//3.3 采样曲面
	double deltaua = 0.05;      //采样间隔
	double deltaub = 0.05;      //采样间隔
	int numa = int((1 / deltaua) + 1);
	int numb = int((1 / deltaub) + 1);
	vector<vector<POINT>> CurvedSurfaceNurbs1 = Nurbs_CurvedSurfacePoint(CS, deltaua, deltaub);
	outFile << "TYPE=FACE\n" << "COLOR=#ff3333\n" << "COLOR=#ff44aa\n";
	outFile << "ROW=" << numa << endl;
	outFile << "COLUMN=" << numb << endl;
	for (int j = 0; j < numb; j++)
	{
		for (int i = 0; i < numa; i++)
		{
			outFile << "(" << CurvedSurfaceNurbs1[i][j].x << "," << CurvedSurfaceNurbs1[i][j].y << "," << CurvedSurfaceNurbs1[i][j].z << ");";
		}
		outFile << "\n";
	}
	outFile << "END\n\n";

	//3.4 由一条Nurbs曲线沿另一Nurbs曲线构成曲面（扫掠）
	int nj = 4;
	int kj = 2;
	NURBSpline Splinej(nj, kj);
	Splinej.ControlPoint = { {0,10,0},{0,10,10},{0,-10,10},{0,-10,0} };
	Splinej.U = { 0,0,0,0.5,1,1,1 };
	Splinej.w = { 1,0.5,0.5,1 };
	NURBSCurvedSurface CS2 = Nurbs_SplineSweep(Splinei, Splinej);
	vector<vector<POINT>> CurvedSurfaceNurbs2 = Nurbs_CurvedSurfacePoint(CS2, deltaua, deltaub);
	outFile << "TYPE=FACE\n" << "COLOR=#ffff33\n" << "COLOR=#33ff33\n";
	outFile << "ROW=" << numa << endl;
	outFile << "COLUMN=" << numb << endl;
	for (int j = 0; j < numb; j++)
	{
		for (int i = 0; i < numa; i++)
		{
			outFile << "(" << CurvedSurfaceNurbs2[i][j].x << "," << CurvedSurfaceNurbs2[i][j].y << "," << CurvedSurfaceNurbs2[i][j].z << ");";
		}
		outFile << "\n";
	}
	outFile << "END\n\n";

	//3.5 Nurbs平面:一次nurbs，节点向量[0,0,1,1]
	int Nplanea = 2;
	int Nplaneb = 2;
	int kplanea = 1;
	int kplaneb = 1;
	NURBSCurvedSurface CSPlane(Nplanea, kplanea, Nplaneb, kplaneb);
	CSPlane.ControlPoint =
	{
	{ {10,0,0},{10,10,0} },
	{ {0,10,0},{0,0,0} }
	};
	CSPlane.Ui = { 0,0,1,1 };
	CSPlane.Uj = { 0,0,1,1 };
	CSPlane.w =
	{
	{ 1, 1 },
	{ 1, 1 }
	};

	//3.6 Nurbs柱面:曲线沿向量拉伸为柱面
	DVector Str = { 0,0,40 };
	NURBSCurvedSurface CSCylinder = Nurbs_SplineStretch(Splinei, Str);

	//3.7 Nurbs旋转：曲面绕轴旋转
	LINESEG LSEG0 = { {0,-40,0} , {0,40,0} };    //空间任意轴，可以用轴上两点表示
	NURBSCurvedSurface CSRevolution = Nurbs_SplineRotation(Splinei, LSEG0);

	//3.8 Nurbs仿射：曲面相对点仿射
	POINT Correla = { 10, 10, 10 };
	DVector Sfactor = { 2, 2, 1 };
	NURBSCurvedSurface CSScaling = Nurbs_SurfaceScaling(CS, Correla, Sfactor);

	//4 Nurbs曲线反求
	vector<POINT> SplinePoint = { { 0,0,0 },{ 3,4,0 },{ -1,4,0 },{ -4,0,0 },{ -4,-3,0 } };   //一系列曲线上的点
	vector<double> wf = { 1,1,1,1,1 };   //各点处的权值，反求时通常默认为1
	int nf = 5;
	int kf = 3;
	NURBSpline SplineF = Nurbs_SplineSolve(SplinePoint, nf, kf, wf);
	vector<POINT> SSplinef = Nurbs_CurvePoint(SplineF, deltaui);
	outFile << "TYPE=LINES\n" << "COLOR=#2200aa\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << SSplinef[i].x << "," << SSplinef[i].y << "," << SSplinef[i].z << ");";
	}
	outFile << "\nEND\n\n";

	//5 插入节点
	double unew = 0.3;
	int r = 3;
	NURBSpline SplineiNew = Nurbs_InsertKnot(Splinei, unew);  //插入单个节点
	NURBSpline Splinej3 = Nurbs_InsertMulKnots(Splinei, unew, r);   //插入多重节点
	vector<POINT> SSplineNew = Nurbs_CurvePoint(SplineiNew, deltaui);
	outFile << "TYPE=LINES\n" << "COLOR=#ff00ff\n";
	for (int i = 0; i < numi; i++)
	{
		outFile << "(" << SSplineNew[i].x << "," << SSplineNew[i].y << "," << SSplineNew[i].z << ");";
	}
	outFile << "\nEND\n\n";

	//6 Nurbs曲线高阶导矢
	int degree = 1;      //导矢阶次，不大于曲线次数
	double uk = 0.4;          //求导处的曲线参数 
	DVector NurbsDerivat = GetNurbsDerivat(degree, Splinei, uk);
	POINT PSplineuk = Point_Nurbspline(Splinei, uk);
	outFile << "TYPE=LINES\n" << "COLOR=#ff5511\n";
	outFile << "(" << PSplineuk.x << "," << PSplineuk.y << "," << PSplineuk.z << ");(" << NurbsDerivat.x << "," << NurbsDerivat.y << "," << NurbsDerivat.z << ");";
	outFile << "\nEND\n\n";

	outFile.close();
	return 0;
}