//#CalculationBase.h
#ifndef CalculationBase
#define CalculationBase
#include <iostream>
#include <math.h>
#include <vector>

double EP = 1E-6;           //定义极小值
double PI = 3.14159265;     //PI用于角度转弧度

struct POINT            //点结构
{
	double x;
	double y;
	double z;
	POINT(double a = 0, double b = 0, double c = 0) { x = a; y = b; z = c; }
};

struct LINESEG //线段结构
{
	POINT s;
	POINT e;
	LINESEG() {};
	LINESEG(POINT a, POINT b) { s = a; e = b; }
};

struct Line  //直线方程（a*x+b*y+c=0;a>0）
{
	double a;
	double b;
	double c;
	Line(double L1 = 1, double L2 = -1, double L3 = 0) { a = L1; b = L2; c = L3; }
};

struct DVector  //空间向量
{
	double x;
	double y;
	double z;
	DVector(double L1 = 0, double L2 = 0, double L3 = 0) { x = L1; y = L2; z = L3; }
};


//阶乘计算
int Factorial(int num);
//组合计算
int Combination(int Base, int Chosen);
//点点构成矢量P1指向P2
DVector PtoP_Vector(const POINT &P1, const POINT &P2);
//点到点之间的距离
double PtoP_Dis(const POINT &P1, const POINT &P2);
//点按向量移动
POINT Point_Move(const POINT &P1, const DVector &D1);
//向量模长
double VectorLength(const DVector &v1);
//单位向量
DVector VectorUnit(const DVector &v1);
//向量叉乘
DVector VecandVec_Mul(const DVector &v1, const DVector &v2);
//向量点乘
double VecandVec_Dotmul(const DVector &v1, const DVector &v2);
//(p1-p0)与(p2-p0)的叉积的模（三维）
double VandV_3DMul(const POINT &p1, const POINT &p2, const POINT &p0);
//(p1-p0)与(p2-p0)的叉积(二维)
double VandV_2DMul(const POINT &p1, const POINT &p2, const POINT &p0);
//(p1-p0)与(p2-p0)的点乘
double VandV_Dotmul(const POINT &p1, const POINT &p2, const POINT &p0);
//(p1-p0)到(p2-p0)的逆时针夹角（二维）
double VandV_Angle(const POINT &p1, const POINT &p2, const POINT &p0);
//返回点1绕点0逆时针旋转alpha角度的点。二维绕点旋转，z值相同
POINT Protation(const POINT &p1, const POINT &p0, double alpha);
//点到线段的垂足的坐标
POINT PtoLs_VtxLocation(const POINT &p1, const LINESEG &l1, double r);
//三维绕轴旋转，获得p1绕线段旋转后的点坐标，角度方向与<l.s, l.e>X<l.s, p1>的方向同边。
POINT PBOLrotation(const POINT &P, const LINESEG &L, double alpha);
//高斯列主元消元法求线性方程组
std::vector<double> Gaussin_L(const std::vector<std::vector<double>> &FuncA, const std::vector<double> &FuncB);
//三点画圆弧，返回圆心
POINT CircleCenter_ThreePoints(const POINT &p1, const POINT &p2, const POINT &p3);
//三点画圆弧，返回半径
double CircleRadius_ThreePoints(const POINT &p1, const POINT &p2, const POINT &p3);



//阶乘计算
int Factorial(int num)
{
	if (num > 0)
	{
		return num * Factorial(num - 1);
	}
	else
	{
		return  1;
	}
}

//组合计算
int Combination(int Base, int Chosen)
{
	return (Factorial(Base) / (Factorial(Chosen)*Factorial(Base - Chosen)));
}

//点点构成矢量P1指向P2
DVector PtoP_Vector(const POINT &P1, const POINT &P2)
{
	DVector DD;
	DD.x = P2.x - P1.x;
	DD.y = P2.y - P1.y;
	DD.z = P2.z - P1.z;
	return DD;
}

//点到点之间的距离
double PtoP_Dis(const POINT &P1, const POINT &P2)
{
	return (sqrt((P1.x - P2.x)*(P1.x - P2.x) + (P1.y - P2.y)*(P1.y - P2.y) + (P1.z - P2.z)*(P1.z - P2.z)));
}

//点按向量移动
POINT Point_Move(const POINT &P1, const DVector &D1)
{
	POINT P2;
	P2.x = P1.x + D1.x;
	P2.y = P1.y + D1.y;
	P2.z = P1.z + D1.z;
	return P2;
}

//向量模长
double VectorLength(const DVector &v1)
{
	return(sqrt(v1.x*v1.x + v1.y*v1.y + v1.z*v1.z));
}

//单位向量
DVector VectorUnit(const DVector &v1)
{
	double len = VectorLength(v1);
	DVector Vu = { v1.x / len, v1.y / len, v1.z / len };
	return Vu;
}

//向量叉乘
DVector VecandVec_Mul(const DVector &v1, const DVector &v2)
{
	DVector Vmul;
	Vmul.x = v1.y*v2.z - v2.y*v1.z;
	Vmul.y = v1.z*v2.x - v2.z*v1.x;
	Vmul.z = v1.x*v2.y - v2.x*v1.y;
	return Vmul;
}

//向量点乘
double VecandVec_Dotmul(const DVector &v1, const DVector &v2)
{
	return(v1.x*v2.x + v1.y*v2.y + v1.z*v2.z);
}

//(p1-p0)与(p2-p0)的叉积的模（三维）
double VandV_3DMul(const POINT &p1, const POINT &p2, const POINT &p0)
{
	double i = (p1.y - p0.y)*(p2.z - p0.z) - (p2.y - p0.y)*(p1.z - p0.z);
	double j = (p2.x - p0.x)*(p1.z - p0.z) - (p1.x - p0.x)*(p2.z - p0.z);
	double k = (p1.x - p0.x)*(p2.y - p0.y) - (p2.x - p0.x)*(p1.y - p0.y);
	return (sqrt(i*i + j * j + k * k));
}

//(p1-p0)与(p2-p0)的叉积(二维)
double VandV_2DMul(const POINT &p1, const POINT &p2, const POINT &p0)
{
	double k = (p1.x - p0.x)*(p2.y - p0.y) - (p2.x - p0.x)*(p1.y - p0.y);
	return k;
}

//(p1-p0)与(p2-p0)的点乘
double VandV_Dotmul(const POINT &p1, const POINT &p2, const POINT &p0)
{
	return ((p1.x - p0.x)*(p2.x - p0.x) + (p1.y - p0.y)*(p2.y - p0.y) + (p1.z - p0.z)*(p2.z - p0.z));
	// >0,(p2-p0)与(p1-p0)成锐角；
	// =0,(p2-p0)与(p1-p0)成直角；
	// <0,(p2-p0)与(p1-p0)成钝角；
}

//(p1-p0)到(p2-p0)的逆时针夹角（二维）
double VandV_Angle(const POINT &p1, const POINT &p2, const POINT &p0)
{
	double v1 = PtoP_Dis(p0, p1);
	double v2 = PtoP_Dis(p0, p2);
	double vv = VandV_Dotmul(p1, p2, p0);
	double vxv = VandV_2DMul(p1, p2, p0);
	double alpha = acos(vv / (v1*v2));
	if (vxv < 0)  //判断夹角是否大于PI
	{
		alpha = 2 * PI - alpha;
	}
	return alpha;
}

//（v1*v2）=a1*a2*cos,(v1Xv2)=a1*a2*sin,v为向量，a为长度，联立求得解，alpha为xy平面夹角，z不参与计算。
//二维绕点旋转，z值相同
POINT Protation(const POINT &p1, const POINT &p0, double alpha)
{
	double x;
	double y;
	double z;
	x = p0.x + (p1.x - p0.x)*cos(alpha) - (p1.y - p0.y)*sin(alpha);
	y = p0.y + (p1.x - p0.x)*sin(alpha) + (p1.y - p0.y)*cos(alpha);
	z = p1.z;
	POINT p2 = { x,y,z };
	return p2;
}

//点到线段的垂足的坐标
POINT PtoLs_VtxLocation(const POINT &p1, const LINESEG &l1, double r = 0)
{
	r = (VandV_Dotmul(p1, l1.e, l1.s)) / ((PtoP_Dis(l1.e, l1.s))*(PtoP_Dis(l1.e, l1.s)));
	double x = r * (l1.e.x - l1.s.x) + l1.s.x;
	double y = r * (l1.e.y - l1.s.y) + l1.s.y;
	double z = r * (l1.e.z - l1.s.z) + l1.s.z;
	POINT Pvtx = { x,y,z };
	return Pvtx;
}


//三维绕轴旋转，获得p1绕线段旋转后的点坐标，角度方向与<l.s, l.e>X<l.s, p1>的方向同边。
POINT PBOLrotation(const POINT &P, const LINESEG &L, double alpha)
{
	POINT p0 = PtoLs_VtxLocation(P, L);
	DVector v0 = {
	P.x - p0.x,
	P.y - p0.y,
	P.z - p0.z
	};
	DVector v1 = {
	(L.e.x - p0.x) / PtoP_Dis(L.e, p0),
	(L.e.y - p0.y) / PtoP_Dis(L.e, p0),
	(L.e.z - p0.z) / PtoP_Dis(L.e, p0)
	};
	DVector v2 = VecandVec_Mul(v1, v0);
	double x = v0.x*cos(alpha) + v2.x*sin(alpha) + p0.x;
	double y = v0.y*cos(alpha) + v2.y*sin(alpha) + p0.y;
	double z = v0.z*cos(alpha) + v2.z*sin(alpha) + p0.z;
	POINT p1 = { x,y,z };
	return p1;
}

//Gaussin列主元消去法求线性方程组的解
std::vector<double> Gaussin_L(const std::vector<std::vector<double>> &FuncA, const std::vector<double> &FuncB)
{
	using namespace std;
	int row = FuncA.size();
	int lin = FuncA[0].size();
	double temp;
	double d;
	vector<double> Solve(row);

	vector<vector<double>> FuncZG(row);  //矩阵的增广矩阵
	for (int i = 0; i < row; i++)
	{
		FuncZG[i].resize(lin + 1);
	}
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < lin; j++)
		{
			FuncZG[i][j] = FuncA[i][j];
		}
	}
	for (int i = 0; i < row; i++)
	{
		FuncZG[i][lin] = FuncB[i];
	}
	for (int k = 0; k < lin; k++)  //找主元最大值
	{
		double max = 0;
		int hang = 0;
		int num = 0;
		for (int i = k; i < row; i++)
		{
			if (fabs(FuncZG[i][k]) > max)
			{
				max = fabs(FuncZG[i][k]);
				hang = i;
			}
		}
		if (FuncZG[hang][k] == 0)
		{
			break;
		}
		if (k != hang)    //交换行
		{
			for (int j = 0; j < lin + 1; j++)
			{
				temp = FuncZG[k][j];
				FuncZG[k][j] = FuncZG[hang][j];
				FuncZG[hang][j] = temp;
			}
		}
		for (int i = k + 1; i < row; i++)  //消元
		{
			d = FuncZG[i][k] / FuncZG[k][k];
			for (int j = 0; j < lin + 1; j++)
			{
				FuncZG[i][j] = FuncZG[i][j] - d * FuncZG[k][j];
			}
		}
	}
	for (int i = row - 1; i >= 0; i--)   //求解
	{
		d = 0;
		for (int k = 0; k < lin; k++)
		{
			d = d + Solve[k] * FuncZG[i][k];
		}
		Solve[i] = (FuncZG[i][lin] - d) / FuncZG[i][i];
	}
	return Solve;
}

//三点画圆弧，返回圆心，xy平面
POINT CircleCenter_ThreePoints(const POINT &p1, const POINT &p2, const POINT &p3)
{
	using namespace std;
	double k1, b1, k2, b2, x, y;
	if ((p1.x == p2.x && p1.y == p2.y) || (p1.x == p3.x && p1.y == p3.y) || (p3.x == p2.x && p3.y == p2.y))
	{
		cout << "Error, there are same points." << endl;
	}
	else if (p1.y == p2.y && p1.y == p3.y)
	{
		cout << "Error, collinear points." << endl;
	}
	else if (p1.y == p2.y)
	{
		k2 = (p2.x - p3.x) / (p3.y - p2.y);
		b2 = (p2.x*p2.x + p2.y*p2.y - p3.x*p3.x - p3.y*p3.y) / (2 * (p2.y - p3.y));
		x = (p1.x + p2.x) / 2;
		y = k2 * x + b2;
	}
	else if (p2.y == p3.y)
	{
		k1 = (p1.x - p2.x) / (p2.y - p1.y);
		b1 = (p1.x*p1.x + p1.y*p1.y - p2.x*p2.x - p2.y*p2.y) / (2 * (p1.y - p2.y));
		x = (p2.x + p3.x) / 2;
		y = k1 * x + b1;
	}
	else if (p1.y != p2.y && p2.y != p3.y)
	{
		k1 = (p1.x - p2.x) / (p2.y - p1.y);
		b1 = (p1.x*p1.x + p1.y*p1.y - p2.x*p2.x - p2.y*p2.y) / (2 * (p1.y - p2.y));
		k2 = (p2.x - p3.x) / (p3.y - p2.y);
		b2 = (p2.x*p2.x + p2.y*p2.y - p3.x*p3.x - p3.y*p3.y) / (2 * (p2.y - p3.y));
		if (k1 == k2)
		{
			cout << "Error, collinear points." << endl;
		}
		else
		{
			x = (b2 - b1) / (k1 - k2);
			y = (k2 * b1 - k1 * b2) / (k2 - k1);
		}
	}
	POINT p0;
	p0.x = x;
	p0.y = y;
	return p0;
}

//三点画圆弧，返回半径，xy平面
double CircleRadius_ThreePoints(const POINT &p1, const POINT &p2, const POINT &p3)
{
	POINT center = CircleCenter_ThreePoints(p1, p2, p3);
	double radius = PtoP_Dis(p1, center);
	return radius;
}

#endif
#pragma once